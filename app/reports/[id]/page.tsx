"use client";

import { useEffect, useState, useRef } from "react";
import { useParams } from "next/navigation";
import { Spinner, Card, Alert, Button } from "flowbite-react";
import { HiInformationCircle, HiDownload } from "react-icons/hi";
import ProtectedPage from "@/app/components/ProtectedPage";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

// Define TypeScript interfaces for the report data
interface ModelEntry {
  id: number;
  name: string;
  task: string;
  target_variable: string;
}

interface Chart {
  id: number;
  chart_type: string;
  title: string;
  description: string;
  chart_image_base64: string;
  chart_code: string;
  llm_reasoning: string;
}

interface Insight {
  id: number;
  title: string;
  description: string;
}

interface ReportData {
  report: {
    id: number;
    title: string;
    description: string;
    ai_insights: string;
    model_entry: ModelEntry;
  };
  charts: Chart[];
  insights: Insight[];
}

function ReportComponent() {
  const params = useParams();
  const reportId = params.id;
  const reportContentRef = useRef<HTMLDivElement>(null);

  const [reportData, setReportData] = useState<ReportData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDownloading, setIsDownloading] = useState(false);

  const handleDownloadPdf = async () => {
    const content = reportContentRef.current;
    if (!content) return;

    setIsDownloading(true);
    try {
        const canvas = await html2canvas(content, {
            scale: 2, // Higher scale for better quality
            useCORS: true,
            logging: false,
        });

        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF({
            orientation: 'p',
            unit: 'px',
            format: [canvas.width, canvas.height]
        });

        pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
        pdf.save(`report_${reportId}.pdf`);
    } catch (error) {
        console.error("Failed to generate PDF:", error);
        setError("Failed to generate PDF. Please try again.");
    } finally {
        setIsDownloading(false);
    }
  };

  useEffect(() => {
    if (reportId) {
      const fetchReportData = async () => {
        try {
          setLoading(true);
          const token = localStorage.getItem("token");
          if (!token) {
            throw new Error("Authentication token not found.");
          }

          const response = await fetch(
            `http://localhost:8000/aiapp/get/?report_id=${reportId}`,
            {
              headers: {
                Authorization: `Bearer ${token}`,
              },
            }
          );

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Failed to fetch report: ${response.statusText}`);
          }

          const data = await response.json();
          if (data.success) {
            setReportData(data);
          } else {
            throw new Error(data.message || "Failed to load report data.");
          }
        } catch (err: any) {
          setError(err.message);
        } finally {
          setLoading(false);
        }
      };

      fetchReportData();
    }
  }, [reportId]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="xl" />
        <p className="ml-4 text-lg">Your AI Data Analyst is generating the report, please wait...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <Alert color="failure" icon={HiInformationCircle}>
          <span className="font-medium">Error!</span> {error}
        </Alert>
      </div>
    );
  }

  if (!reportData) {
    return (
      <div className="p-8 text-center">
        <p>No report data found.</p>
      </div>
    );
  }

  const formatInsightSection = (text: string) => {
    if (!text) return '';
    let content = text.replace(/^\d+\.\s.*?\n/, '');
    content = content.replace(/-\s/g, '</li><li class="mb-2">');
    return `<ul class="list-disc list-inside">${content}</ul>`;
  };

  const aiInsightsSections = reportData.report.ai_insights
    .split('## ')
    .filter(section => section.trim() !== '');

  const getSection = (title: string) => {
      return aiInsightsSections.find(sec => sec.trim().startsWith(title));
  }
  
  const businessImpact = getSection('6. Business Impact Analysis');
  
  return (
    <div className="bg-gray-50 min-h-screen p-4 sm:p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        <header className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-4xl font-bold text-gray-800 tracking-tight">
              Analysis of {reportData.report.model_entry.name}
            </h1>
            <p className="mt-2 text-lg text-gray-500">
              A comprehensive report generated by our AI Data Analyst.
            </p>
          </div>
          <Button onClick={handleDownloadPdf} disabled={isDownloading}>
            <HiDownload className="mr-2 h-5 w-5" />
            {isDownloading ? 'Downloading...' : 'Download as PDF'}
          </Button>
        </header>

        <div ref={reportContentRef}>
          <div className="space-y-12">
            {reportData.charts.map((chart, index) => (
              <Card key={chart.id} className="w-full shadow-sm hover:shadow-xl transition-shadow duration-300 overflow-hidden">
                <div className="p-4 sm:p-6">
                  <h3 className="text-2xl font-bold text-gray-800 mb-4">
                    {index + 1}. {chart.title}
                  </h3>
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
                    <div className="bg-white p-4 rounded-lg border border-gray-200 flex justify-center items-center h-[450px]">
                      {chart.chart_image_base64 ? (
                        <img
                          src={`data:image/png;base64,${chart.chart_image_base64}`}
                          alt={chart.title}
                          className="max-w-full max-h-full object-contain"
                        />
                      ) : (
                        <div className="text-center text-gray-500">
                          Chart image is not available.
                        </div>
                      )}
                    </div>
                    <div className="flex flex-col h-full">
                      <h4 className="font-semibold text-gray-700 text-xl mb-2">Chart Explanation</h4>
                      <div className="flex-grow p-4 bg-gray-50 rounded-lg">
                        <p className="text-gray-600">{chart.description}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          <Card className="mt-12 w-full shadow-lg">
              <h2 className="text-2xl font-semibold text-gray-700 mb-4">AI Business Summary</h2>
              <div className="prose prose-lg max-w-none">
                  <h3 className="font-semibold text-xl text-gray-800">Business Impact Analysis</h3>
                  {businessImpact ? <div dangerouslySetInnerHTML={{ __html: formatInsightSection(businessImpact) }} /> : <p>No business impact analysis available.</p>}
              </div>
          </Card>
        </div>
      </div>
    </div>
  );
}


export default function ReportPage() {
    return (
        <ProtectedPage>
            <ReportComponent />
        </ProtectedPage>
    );
} 